@page "/Watering"
@using Client.Services
@using Shared.Dto.ServerResponses
@using Client.Components
@inject IDialogService DialogService
@inject SensorsClientService StateService
@implements IDisposable
<style>
	.center-tabs {
		font-size: 25px;
	}
</style>

<MudContainer Class="pa-0 mud-height-full" MaxWidth="MaxWidth.ExtraLarge">
    <SensorsBoxTabContainer ActiveIndexChanged="ChangeClient">
        @if (_state is null)
        {
            <MudProgressLinear Indeterminate Size="Size.Large"/>
        }
        else
        {
            <MudStack Class="scroll-paper">
                <MudPaper Class="ma-5 ">
                    <MudSimpleTable>
                        <tbody>
                        <tr style="">
                            <td style="width: 1000px">
                                <MudText Typo="Typo.h5" Style="font-size: 55px">Влажность почвы: @_state?.SoilHumidityData.Current%</MudText>
                            </td>
                            <td>
                                <MudText Typo="Typo.h5" Style="font-size: 55px">Мин: @_state?.SoilHumidityData.Min%</MudText>
                            </td>
                            <td>
                                <MudText Typo="Typo.h5" Style="font-size: 55px">Макс: @_state?.SoilHumidityData.Max%</MudText>
                            </td>
                            <td>
                                <MudButton OnClick="OpenDialog"
                                           Variant="Variant.Filled" Size="Size.Large" Class="large-button"
                                           Color="Color.Primary">
                                    Изменить
                                </MudButton>
                            </td>
                        </tr>
                        <tr style="">
                            <td>
                                <MudText Typo="Typo.h5" Style="font-size: 55px">Наличие растения</MudText>
                            </td>
                            <td>
                                <MudText Typo="Typo.h5" Style="font-size: 55px">@(_state.HasPlant ? "есть" : "нету")</MudText>
                            </td>
                        </tr>
                        <tr style="">
                            <td>
                                <MudText Typo="Typo.h5" Style="font-size: 55px">Наличие воды</MudText>
                            </td>
                            <td>
                                <MudText Typo="Typo.h5" Style="font-size: 55px">@(_state.HasWater ? "есть" : "нету")</MudText>
                            </td>
                        </tr>
                        </tbody>
                    </MudSimpleTable>

                    <MudStack Justify="Justify.FlexStart" Class="pa-4" Style="width: 550px; gap: 40px">
                        <MudStack Row AlignItems="AlignItems.Center">
                            <MudText Typo="Typo.h5">Помпа</MudText>
                            <MudSpacer/>
                            <MudSwitch @bind-Value="@_pumpSwitch" Disabled="@(!_state.HasWater)"
                                       Size="Size.Large" Color="Color.Primary" Class="large"
                                       @onclick="PumpSwitchCallback"/>
                            @if (!_state.HasWater)
                            {
                            <MudText Typo="Typo.h6" Color="Color.Error">Недостаточно воды</MudText>
                            }
                        </MudStack>
                    </MudStack>
                </MudPaper>
            </MudStack>
        }
    </SensorsBoxTabContainer>

</MudContainer>


@code {

    private WateringState? _state;

    private bool _pumpSwitch;
    private int? _clientId;

    private readonly PeriodicTimer _periodicTimer = new(TimeSpan.FromSeconds(1));
    private Task _processingTask = Task.CompletedTask;

    private async void TimerProcessing()
    {
        while (await _periodicTimer.WaitForNextTickAsync())
        {
            try
            {
                await UpdateState();

                await InvokeAsync(StateHasChanged);
            }
            catch
            {
                await Task.Delay(5000);
            }
        }

        StateHasChanged();
    }

    protected override Task OnInitializedAsync()
    {
        _processingTask = Task.Run(TimerProcessing);
        return base.OnInitializedAsync();
    }

    private async Task UpdateState()
    {
        if (_clientId == null) return;

        _state = await StateService.GetWateringState(_clientId.Value);
        _pumpSwitch = _state.PumpOn;
    }

    private async void ChangeClient(int obj)
    {
        _clientId = obj;
        _state = null;
        await UpdateState();
        await InvokeAsync(StateHasChanged);
    }


    public async void OpenDialog()
    {
        if (_state is null) return;

        var dialog = await DialogService.ShowAsync<MinMaxSettingsEditDialog>("Пороги влажности почвы", new DialogOptions()
        {
            MaxWidth = MaxWidth.ExtraLarge
        });

        var result = await dialog.Result;

        if (result.Canceled) return;

        var values = ((int min, int max))result.Data;

        _state.SoilHumidityData = _state.SoilHumidityData with
        {
            Max = values.max,
            Min = values.min,
        };

        await StateService.UpdateSoilHumidityLimits(_clientId, _state.SoilHumidityData);

        await InvokeAsync(StateHasChanged);
    }

    private async Task PumpSwitchCallback()
    {
        if (_clientId == null || _state is null) return;

        if (!_state.HasPlant)
        {
            var result = await DialogService.ShowMessageBox(
                "Вы уверенны?",
                "В термокамере отсутствует растение. Вы уверенны что хотите включить полив?",
                yesText: "Да", cancelText: "Нет", options: new DialogOptions()
                {
                    MaxWidth = MaxWidth.Large
                });
            if (result is null)
                return;
        }

        _pumpSwitch = !_pumpSwitch;
        
        StateHasChanged();
        
        await StateService.SetPumpState(_clientId.Value, _pumpSwitch);
    }

    public void Dispose()
    {
        _periodicTimer.Dispose();
        _processingTask?.Dispose();
    }

}