@page "/Microclimate"
@using Client.Services
@using Shared.Dto.ServerResponses
@using Client.Components
@using Shared.ValueModels
@inject IDialogService DialogService
@inject SensorsClientService StateService
@implements IDisposable
<style>
	.center-tabs {
		font-size: 55px;
	}
</style>
<MudContainer Class="pa-0 mud-height-full" MaxWidth="MaxWidth.ExtraLarge">
    <SensorsBoxTabContainer ActiveIndexChanged="ChangeClient">
        @if (_state is null)
        {
            <MudProgressLinear Indeterminate Size="Size.Large"/>
        }
        else
        {
            <MudStack Class="scroll-paper">
                <MudPaper Class="ma-5">
                    <MudSimpleTable Elevation="6">
                        <tbody>
                        <tr>
                            <td>
                                <MudText Typo="Typo.h5" Style="font-size: 55px">Температура: @_state?.TemperatureData.Current С</MudText>
                            </td>
                            <td>
                                <MudText Typo="Typo.h5" Style="font-size: 55px">Мин: @_state?.TemperatureData.Min С</MudText>
                            </td>
                            <td>
                                <MudText Typo="Typo.h5" Style="font-size: 55px">Макс: @_state?.TemperatureData.Max С</MudText>
                            </td>
                            <td>
                                <MudButton OnClick="OpenDialogTemp"
                                           Variant="Variant.Filled" Size="Size.Large" Class="large-button"
                                           Color="Color.Primary">
                                    Изменить
                                </MudButton>
                            </td>
                        </tr>
                        <tr >
                            <td>
                                <MudText Typo="Typo.h5" Style="font-size: 55px">Влажность: @_state?.HumidityData.Current %</MudText>
                            </td>
                            <td>
                                <MudText Typo="Typo.h5" Style="font-size: 55px">Мин: @_state?.HumidityData.Min %</MudText>
                            </td>
                            <td>
                                <MudText Typo="Typo.h5" Style="font-size: 55px">Макс: @_state?.HumidityData.Max %</MudText>
                            </td>
                            <td>
                                <MudButton OnClick="OpenDialogHumidifier"
                                           Variant="Variant.Filled" Size="Size.Large" Class="large-button"
                                           Color="Color.Primary">
                                    Изменить
                                </MudButton>
                            </td>
                        </tr>
                        </tbody>
                    </MudSimpleTable>

                    <MudStack Justify="Justify.FlexStart" Class="pa-4" Style="width: 550px; gap: 40px">
                        <MudStack Row AlignItems="AlignItems.Center">
                            <MudText Typo="Typo.h5">Окно</MudText>
                            <MudSpacer/>
                            <MudSwitch @bind-Value="@_windowSwitch"
                                       Size="Size.Large" Color="Color.Primary" Class="large"
                                       @onclick="WindowSwitchCallback"/>
                        </MudStack>
                        <MudStack Row AlignItems="AlignItems.Center">
                            <MudText Typo="Typo.h5">Вентилятор</MudText>
                            <MudSpacer/>
                            <MudSwitch @bind-Value="@_fanSwitch"
                                       Size="Size.Large" Color="Color.Primary" Class="large"
                                       @onclick="FanSwitchCallback"/>
                        </MudStack>
                        <MudStack Row AlignItems="AlignItems.Center">
                            <MudText Typo="Typo.h5">Увлажнитель</MudText>
                            <MudSpacer/>
                            <MudSwitch @bind-Value="@_humidifierSwitch" Disabled="@(!_state.HasWater)"
                                       Size="Size.Large" Color="Color.Primary" Class="large"
                                       @onclick="HumidifierSwitchCallback"/>
                            @if (!_state.HasWater)
                            {
                                <MudText Typo="Typo.h6" Color="Color.Error">Недостаточно воды</MudText>
                            }
                        </MudStack>

                    </MudStack>
                </MudPaper>
            </MudStack>
        }
    </SensorsBoxTabContainer>

</MudContainer>


@code {
    private InsideMicroclimateState? _state;

    private bool _windowSwitch;
    private bool _fanSwitch;
    private bool _humidifierSwitch;

    private int? _clientId;

    private bool _isProcessing;

    private readonly PeriodicTimer _periodicTimer = new(TimeSpan.FromSeconds(2));
    private Task _processingTask = Task.CompletedTask;

    private async void TimerProcessing()
    {
        while (await _periodicTimer.WaitForNextTickAsync())
        {
            try
            {
                await UpdateState();


                await InvokeAsync(StateHasChanged);
            }
            catch
            {
                await Task.Delay(5000);
            }
        }

        StateHasChanged();
    }

    protected override Task OnInitializedAsync()
    {
        _processingTask = Task.Run(TimerProcessing);
        return base.OnInitializedAsync();
    }


    public async void OpenDialogTemp()
    {
        if (_state is null) return;

        var dialog = await DialogService.ShowAsync<MinMaxSettingsEditDialog>("Пороги температуры", new DialogOptions()
        {
            MaxWidth = MaxWidth.ExtraLarge
        });

        var result = await dialog.Result;

        if (result.Canceled) return;

        var values = ((int min, int max))result.Data;

        _state.TemperatureData = _state.TemperatureData with
        {
            Max = values.max,
            Min = values.min,
        };

        await StateService.UpdateTemperatureLimits(_clientId, _state.TemperatureData);

        await InvokeAsync(StateHasChanged);
    }

    public async void OpenDialogHumidifier()
    {
        if (_state is null) return;

        var dialog = await DialogService.ShowAsync<MinMaxSettingsEditDialog>("Пороги влажности", new DialogOptions()
        {
            MaxWidth = MaxWidth.ExtraLarge
        });

        var result = await dialog.Result;

        if (result.Canceled) return;

        var values = ((int min, int max))result.Data;

        _state.HumidityData = _state.HumidityData with
        {
            Max = values.max,
            Min = values.min,
        };

        await StateService.UpdateHumidityLimits(_clientId, _state.HumidityData);

        await InvokeAsync(StateHasChanged);
    }

    private async void ChangeClient(int obj)
    {
        _clientId = obj;
        _state = null;
        await UpdateState();
        await InvokeAsync(StateHasChanged);
    }

    private async Task UpdateState()
    {
        if (_clientId == null || _isProcessing) return;

        _state = await StateService.GetMicroclimateState(_clientId.Value);


        if (!_isProcessing)
        {
            _windowSwitch = _state.WindowOn;
            _fanSwitch = _state.FanOn;
            _humidifierSwitch = _state.HumidifierOn;
        }
    }


    private async void HumidifierSwitchCallback()
    {
        if (_clientId == null) return;

        _humidifierSwitch = !_humidifierSwitch;

        await StateService.SetHumidifierState(_clientId.Value, _humidifierSwitch);
    }

    private async void FanSwitchCallback()
    {
        if (_clientId == null) return;

        _fanSwitch = !_fanSwitch;

        await StateService.SetFanState(_clientId.Value, _fanSwitch);
    }

    private async void WindowSwitchCallback()
    {
        if (_clientId == null) return;

        _windowSwitch = !_windowSwitch;

        await StateService.SetWindowState(_clientId.Value, _windowSwitch);
    }

    public void Dispose()
    {
        _periodicTimer.Dispose();
        _processingTask?.Dispose();
    }

}